name: Build Image

on:
  workflow_call:
    inputs:
      codeql_enabled:
        type: boolean
        required: false
        default: true
        description: |
          If CodeQL is enabled or not, when enabled it will upload the sarif scan results and
           make any findings available in the security tab
      image_name:
        type: string
        required: true
        description: The image name, typically the repository name
      registry:
        type: string
        required: false
        default: 'ghcr.io/curium-rocks'

jobs:
  build-image:
    name: Build
    env:
      REGISTRY: ${{ inputs.registry }}
      IMAGE_NAME: ${{ inputs.image_name }}
      CODEQL_ENABLED: ${{ inputs.codeql_enabled }}
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@7bca8b41164994a7dc93749d266e2f1db492f8a2
        with:
          cosign-release: 'v1.13.1'
      # for multi arch container builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all
      - name: Setup Docker buildx
        id: buildx
        timeout-minutes: 4
        uses: docker/setup-buildx-action@39a1a82492fd1ad19af19d61b5f748e4cb6cd1af
      - name: Log into registry
        timeout-minutes: 5
        uses: docker/login-action@f75d088332b07a08afadf6ac53c74509b9453f12
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get Default Branch Name
        id: default-branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "::set-output name=name::$(gh repo view --json defaultBranchRef --jq .defaultBranchRef.name)"
      - name: Extract Docker metadata
        id: meta
        timeout-minutes: 5
        uses: docker/metadata-action@314ddf6d4a82333bf1bc7630399df41bf68eba09
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=schedule
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', steps.default-branch.outputs.name) }}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value={{date 'YYYYMMDD'}}-{{sha}}
      - name: Build Docker image
        id: build
        timeout-minutes: 25
        uses: docker/build-push-action@175d02bffea74695e96b351069ac938b338802f9
        with:
          context: .
          load: true
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
      - name: Get Short SHA
        id: short-sha
        run: |
          export SHORT_SHA=$(git rev-parse --short HEAD)
          echo "::set-output name=sha_short::$SHORT_SHA"
          echo "::set-output name=sha_tag::${{ env.REGISTRY}}/${{ env.IMAGE_NAME }}:sha-$SHORT_SHA"
        
      - name: Scan image
        id: scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.short-sha.outputs.sha_tag }}
          format: 'sarif'
          output: 'scan-results.sarif'
      - name: Upload Container Scan SARIF report
        if: ${{ env.CODEQL_ENABLED }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'scan-results.sarif'
      - name: Push image
        if: github.event_name != 'pull_request'
        id: push
        timeout-minutes: 60
        uses: docker/build-push-action@175d02bffea74695e96b351069ac938b338802f9
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          load: false
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: cosign sign --force --recursive ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.push.outputs.digest }}
